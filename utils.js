/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: MIT-0
 */

/**
 * @fileoverview Utility scripts for various functions like Cookies, Buttons,  Queries, Validation, Mic, UI, UI Panels
 * @version 1.0.0
 */

/**
 * Sets a cookie with the specified name, value, and expiration days
 * @param {string} name - Cookie name
 * @param {string} value - Cookie value
 * @param {number} [days=7] - Days until cookie expires
 */
function setCookie(name, value, days = 7) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `expires=${date.toUTCString()}`;
    document.cookie = `${name}=${encodeURIComponent(value)}; ${expires}; path=/; Secure; SameSite=Strict; HttpOnly`;
}

/**
 * Retrieves a cookie value by name
 * @param {string} name - Cookie name
 * @returns {string|null} Cookie value if found, null otherwise
 */
function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(nameEQ) === 0) {
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
        }
    }
    return null;
}

/**
 * Deletes a cookie by name
 * @param {string} name - Cookie name to delete
 */
function deleteCookie(name) {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; Secure; SameSite=Strict; HttpOnly`;
}

/**
 * Restores an element's value from a cookie if it exists
 * @param {string} cookieName - Name of cookie to restore from
 * @param {string} elementId - ID of element to restore value to
 */
function restoreFromCookieIfSet(cookieName, elementId) {
    try {
        const value = getCookie(cookieName);
        if (value) {
            const element = document.getElementById(elementId);
            if (element) {
                // Sanitize the cookie value before using it
                element.value = sanitizeInput(value);
            }
        }
    } catch (error) {
        console.error(`Error restoring cookie ${cookieName}:`, error);
        // Delete potentially corrupted cookie
        deleteCookie(cookieName);
    }
}

/**
 * Saves form settings to cookies
 */
function saveSettingsToCookies() {
    try {
        const applicationId = sanitizeInput(document.getElementById('setupApplicationId').value);
        const streamGroupId = sanitizeInput(document.getElementById('setupStreamGroupId').value);
        const userId = sanitizeInput(document.getElementById('setupUserId').value);
        const args = sanitizeInput(document.getElementById('setupArgs').value);
        const env = sanitizeInput(document.getElementById('setupEnv').value);

        if (applicationId) setCookie('setupApplicationId', applicationId);
        if (streamGroupId) setCookie('setupStreamGroupId', streamGroupId);
        if (userId) setCookie('setupUserId', userId);
        if (args) setCookie('setupArgs', args);
        if (env) setCookie('setupEnv', env);
    } catch (error) {
        console.error('Error saving settings to cookies:', error);
    }
}

/**
 * Creates and displays a refresh button for analysis
 */
function showRefreshButton() {
    const refreshButton = document.createElement('button');
    refreshButton.textContent = 'Refresh Analysis';
    refreshButton.onclick = () => {
        document.getElementById('loadingIndicator').style.display = 'block';
        document.getElementById('statsContent').style.display = 'none';
        refreshButton.remove();
        endStreamSession(currentToken);
    };
    document.getElementById('aiWebrtcStats').appendChild(refreshButton);
}

/**
 * Sets URL query parameters
 * @param {Map} queryParamsMap - Map of parameter keys and values
 */
function setQueryParams(queryParamsMap) {
    const url = new URL(location);
    for (const [key, value] of queryParamsMap.entries()) {
        url.searchParams.set(key, value);
    }
    // Use replace state to prevent page refresh
    window.history.replaceState(null, null, url);
}

/**
 * Gets current URL query parameters
 * @returns {URLSearchParams} Current URL parameters
 */
function getQueryParams() {
    return new URLSearchParams(window.location.search);
}

/**
 * Removes all query parameters from URL
 */
function deleteAllQueryParams() {
    const cleanPath = window.location.pathname;
    window.history.replaceState(null, null, cleanPath);
}

/**
 * Sets a cookie with 1 year expiration
 * @param {string} name - Cookie name
 * @param {string} val - Cookie value
 */
function setCookie(name, val) {
    const d = new Date();
    d.setTime(d.getTime() + 365*24*3600*1000);
    document.cookie = `${name}=${encodeURIComponent(val)};expires=${d.toUTCString()};path=/`;
}

/**
 * Deletes a cookie by setting its expiration to a past date
 * @param {string} name - Cookie name to expire
 */
function expireCookie(name) {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/`;
}

/**
 * Retrieves a cookie value if it exists
 * @param {string} name - Cookie name to retrieve
 * @returns {string|undefined} Decoded cookie value or undefined if not found
 */
function getCookieIfSet(name) {
    const value = document.cookie.split(/;\s*/).find(x => x.startsWith(name + '='))?.split('=')?.[1];
    if (value) {
        return decodeURIComponent(value);
    }
    return value;
}

/**
 * Restores an element's value from a cookie if it exists
 * @param {string} id - Element ID to update
 * @param {string} name - Cookie name to retrieve
 */
function restoreFromCookieIfSet(id, name) {
    const x = getCookieIfSet(name);
    if (x) {
        document.getElementById(id).value = x;
    }
}

/**
 * Gets API Gateway URL from current URL
 * @returns {string} API Gateway URL
 */
 function getApiGatewayUrlFromCurrentUrl() {
    const currentUrl = new URL(window.location.href);
    const apiGatewayUrl = `${currentUrl.protocol}//${currentUrl.hostname}/prod/`;
    return apiGatewayUrl;
}

/**
 * Enables microphone access
 * @returns {Promise<void>}
 */
async function appEnableMic() {
    if (window.myMicEnabling || window.myMicEnabled) {
        return;
    }

    window.myMicEnabling = true;
    try {
        await window.myGameLiftStreams.enableMicrophone();
        window.myMicEnabled = true;
    } catch (e) {
        // Handle DOMException, prompt user if microphone is necessary
    } finally {
        window.myMicEnabling = false;
    }

    if (window.myMicEnabled) {
        document.getElementById('setupMicCheck').innerHTML = 'ENABLED';
        document.getElementById('setupEnableMic').style.display = 'none';
    }
}

/**
 * Validates setup form inputs
 * @returns {boolean} True if validation passes
 */
function appValidateSetup(isLocal) {
    const getValue = (id) => document.getElementById(id).value;
    const checkString = (x) => { if (typeof(x) !== 'string') throw new Error(); return 1; };
    const err = (() => {
        if (!getValue('setupUserId').match(/^[-a-zA-Z0-9]{1,100}$/)) {
            return 'Invalid User ID - must be between 1 and 100 alphanumeric characters or hyphens';
        }
        // Only validate Stream Group ID if isLocal is true
        if (isLocal && !getValue('setupStreamGroupId').match(/^(arn:.+[/])?sg-[a-zA-Z0-9]{5,}$/)) {
            return 'Invalid Stream Group ID - check the GameLiftStreams console for valid Stream Group IDs';
        }
        try {
            JSON.parse(getValue('setupLocations') || '[]').forEach(checkString);
        } catch {
            return 'Invalid JSON list for Locations - example: ["us-east-2", "ap-northeast-1"]';
        }
        if (getValue('setupApplicationId') !== "" && !getValue('setupApplicationId').match(/^(arn:.+[/])?a-[a-zA-Z0-9]{4,}$/)) {
            return 'Invalid Application ID - check the GameLiftStreams console for valid Application IDs';
        }
        try {
            JSON.parse(getValue('setupArgs') || '[]').forEach(checkString);
        } catch {
            return 'Invalid JSON list for Command-Line Arguments - example: ["-flag1", "-flag2", "Arg3", "file.dat"]';
        }
        try {
            Object.entries(JSON.parse(getValue('setupEnv') || '{}')).forEach(([k,v]) => checkString(k) && checkString(v));
        } catch {
            return 'Invalid JSON object for Environment Variables - example: {"CONFIG": "1", "EXTRACONFIG": "yes"}';
        }
        return '';
    })();
    document.getElementById('setupValidationError').innerHTML = err;

    // For convenience, remember current settings as cookies for future page reloads
    setCookie('savedApplicationId', getValue('setupApplicationId'));
    setCookie('savedStreamGroupId', getValue('setupStreamGroupId'));
    setCookie('savedLocations', getValue('setupLocations'));
    setCookie('savedUserId', getValue('setupUserId'));
    setCookie('savedArgs', getValue('setupArgs'));
    setCookie('savedEnv', getValue('setupEnv'));

    return err.length == 0;
}

/**
 * Toggles visibility of reconnect links
 * @param {boolean} show - Whether to show or hide links
 */
function appShowReconnectLinks(show) {
    for (const iter of document.getElementsByClassName('reconnectionLink')) {
        iter.style.display = show ? 'initial' : 'none';
    }
}

/**
 * Shows specified panel and hides others
 * @param {string} id - ID of panel to show
 */
function appShowPanel(id) {
    for (const iter of document.querySelectorAll("body > div")) {
        iter.style.display = (iter.id === id) ? 'block' : 'none';
    }
}

/**
 * Toggles help menu visibility
 */
function helpMenuPanel() {
    const helpMenu = document.getElementById('helpMenu');
    const helpButton = document.getElementById('helpBtn');
    const widgetMenuOptions = document.getElementById('widgetMenuOptions');
    const widgetOptions = document.getElementById('widgetOptions');

    if (helpMenu.style.display === 'none' || helpMenu.style.display === '') {
        helpMenu.style.display = 'block';
        helpButton.classList.add('active');
        // Hide widget menu options when help menu is shown
        widgetMenuOptions.style.display = 'none';
        widgetOptions.style.display = 'none';
    } else {
        helpMenu.style.display = 'none';
        helpButton.classList.remove('active');
    }
}

/**
 * Toggles input attachment state
 */
function appToggleInput() {
    if (window.myGameLiftStreams && window.myGameLiftStreams.detachInput) {
        window.myGameLiftStreams.detachInput();
    } else {
        console.warn('myGameLiftStream or detachInput not available');
    }

    window.myInputEnabled = !window.myInputEnabled;
    const toggleButton = document.getElementById('streamingToggleInput');
    
    if (window.myInputEnabled) {
        console.log("Attached Input");
        window.myGameLiftStreams.attachInput();
        toggleButton.innerHTML = `
        <svg class="default-svg" width="142" height="34" viewBox="0 0 142 34" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="1" y="1" width="140" height="32" rx="9" stroke="white" stroke-opacity="0.5" stroke-width="2"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M16.6673 24.495L27.4957 13.6667H30V20.3333H23.334V27H16.6673V24.495ZM10 20.3333H13.6372L23.334 10.6366V7H16.6673V13.6667H10V20.3333ZM18.2227 10.1394V10.895H21.7782V10.1394L20.0004 8.11719L18.2227 10.1394ZM18.2227 23.8606V23.105H21.7782V23.8606L20.0004 25.8828L18.2227 23.8606ZM26.8664 15.2179H26.1109V18.7734H26.8664L28.8887 16.9957L26.8664 15.2179ZM13.1336 18.7734H13.8891V15.2179H13.1336L11.1113 16.9957L13.1336 18.7734ZM29.7385 9.26777L27.9707 7.5L11.0001 24.4706L12.7679 26.2383L29.7385 9.26777Z" fill="white"/>
        <path d="M47.5635 16.791C47.5635 17.9531 47.347 18.9193 46.9141 19.6895C46.4811 20.4596 45.8704 21.0384 45.082 21.4258C44.2982 21.8086 43.3753 22 42.3135 22H39.0801V12.0059H42.5391C43.6146 12.0059 44.526 12.1904 45.2734 12.5596C46.0208 12.9287 46.5882 13.4688 46.9756 14.1797C47.3675 14.8906 47.5635 15.7611 47.5635 16.791ZM44.7607 16.8867C44.7607 16.2806 44.6787 15.7793 44.5146 15.3828C44.3551 14.9818 44.1136 14.6833 43.79 14.4873C43.4665 14.2868 43.0586 14.1865 42.5664 14.1865H41.7803V19.7852H42.3818C43.2021 19.7852 43.8037 19.5482 44.1865 19.0742C44.5693 18.5957 44.7607 17.8665 44.7607 16.8867ZM52.6904 14.1182C53.4424 14.1182 54.0918 14.2503 54.6387 14.5146C55.1855 14.7744 55.6071 15.1663 55.9033 15.6904C56.1995 16.2145 56.3477 16.8708 56.3477 17.6592V18.8486H51.5693C51.5921 19.2542 51.7425 19.5869 52.0205 19.8467C52.3031 20.1064 52.7178 20.2363 53.2646 20.2363C53.7477 20.2363 54.1898 20.1885 54.5908 20.0928C54.9964 19.9971 55.4134 19.849 55.8418 19.6484V21.5693C55.4681 21.7653 55.0602 21.9089 54.6182 22C54.1761 22.0911 53.6178 22.1367 52.9434 22.1367C52.1641 22.1367 51.4668 21.9977 50.8516 21.7197C50.2363 21.4417 49.751 21.0111 49.3955 20.4277C49.0446 19.8444 48.8691 19.0947 48.8691 18.1787C48.8691 17.249 49.0286 16.4857 49.3477 15.8887C49.6667 15.2871 50.1133 14.8428 50.6875 14.5557C51.2617 14.264 51.9294 14.1182 52.6904 14.1182ZM52.7861 15.9365C52.4717 15.9365 52.2074 16.0368 51.9932 16.2373C51.7835 16.4333 51.6605 16.7432 51.624 17.167H53.9209C53.9163 16.9391 53.8708 16.7318 53.7842 16.5449C53.6976 16.3581 53.57 16.21 53.4014 16.1006C53.2373 15.9912 53.0322 15.9365 52.7861 15.9365ZM61.6523 20.0244C61.8939 20.0244 62.1149 19.9993 62.3154 19.9492C62.516 19.8991 62.7256 19.8353 62.9443 19.7578V21.7061C62.6527 21.8337 62.3428 21.9362 62.0146 22.0137C61.6911 22.0957 61.2764 22.1367 60.7705 22.1367C60.2692 22.1367 59.8271 22.0592 59.4443 21.9043C59.0615 21.7448 58.763 21.4714 58.5488 21.084C58.3392 20.6921 58.2344 20.1475 58.2344 19.4502V16.2578H57.2979V15.1709L58.4873 14.3301L59.1777 12.7031H60.9277V14.2549H62.8281V16.2578H60.9277V19.2725C60.9277 19.5231 60.9915 19.7122 61.1191 19.8398C61.2467 19.9629 61.4245 20.0244 61.6523 20.0244ZM68.0781 14.1182C69.0579 14.1182 69.8236 14.362 70.375 14.8496C70.9264 15.3327 71.2021 16.0231 71.2021 16.9209V22H69.3496L68.8369 20.9746H68.7822C68.5635 21.248 68.3379 21.4714 68.1055 21.6445C67.8776 21.8132 67.6156 21.9362 67.3193 22.0137C67.0231 22.0957 66.6608 22.1367 66.2324 22.1367C65.7858 22.1367 65.3848 22.0456 65.0293 21.8633C64.6738 21.681 64.3936 21.4053 64.1885 21.0361C63.9834 20.667 63.8809 20.1999 63.8809 19.6348C63.8809 18.8053 64.168 18.1901 64.7422 17.7891C65.3164 17.388 66.1481 17.1624 67.2373 17.1123L68.5293 17.0713V16.9619C68.5293 16.6156 68.4427 16.3695 68.2695 16.2236C68.1009 16.0778 67.873 16.0049 67.5859 16.0049C67.2806 16.0049 66.9388 16.0596 66.5605 16.1689C66.1868 16.2738 65.8109 16.4105 65.4326 16.5791L64.6602 14.8154C65.1068 14.5876 65.6126 14.4144 66.1777 14.2959C66.7428 14.1774 67.3763 14.1182 68.0781 14.1182ZM68.543 18.541L67.9277 18.5684C67.4355 18.5866 67.0892 18.6732 66.8887 18.8281C66.6927 18.9785 66.5947 19.195 66.5947 19.4775C66.5947 19.7419 66.6654 19.9378 66.8066 20.0654C66.9479 20.1885 67.1348 20.25 67.3672 20.25C67.6908 20.25 67.9665 20.1475 68.1943 19.9424C68.4268 19.7373 68.543 19.4707 68.543 19.1426V18.541ZM76.5479 22.1367C75.764 22.1367 75.0827 21.9977 74.5039 21.7197C73.9251 21.4372 73.4762 21.0042 73.1572 20.4209C72.8428 19.833 72.6855 19.0811 72.6855 18.165C72.6855 17.2262 72.861 16.4583 73.2119 15.8613C73.5674 15.2643 74.0527 14.8245 74.668 14.542C75.2832 14.2594 75.9805 14.1182 76.7598 14.1182C77.2337 14.1182 77.6826 14.1706 78.1064 14.2754C78.5348 14.3802 78.9313 14.5238 79.2959 14.7061L78.5098 16.6816C78.1908 16.5404 77.8923 16.4287 77.6143 16.3467C77.3408 16.2601 77.056 16.2168 76.7598 16.2168C76.4909 16.2168 76.2539 16.2874 76.0488 16.4287C75.8438 16.57 75.6842 16.7842 75.5703 17.0713C75.4564 17.3538 75.3994 17.7139 75.3994 18.1514C75.3994 18.598 75.4564 18.958 75.5703 19.2314C75.6888 19.5049 75.8506 19.7031 76.0557 19.8262C76.2653 19.9492 76.5046 20.0107 76.7734 20.0107C77.1608 20.0107 77.5459 19.9515 77.9287 19.833C78.3161 19.71 78.6829 19.5413 79.0293 19.3271V21.4531C78.7103 21.6628 78.3503 21.8291 77.9492 21.9521C77.5482 22.0752 77.0811 22.1367 76.5479 22.1367ZM83.2402 11.3633V12.874C83.2402 13.4482 83.2266 13.9313 83.1992 14.3232C83.1764 14.7106 83.1536 15.0068 83.1309 15.2119H83.2539C83.4225 14.943 83.6139 14.7288 83.8281 14.5693C84.0423 14.4098 84.2793 14.2959 84.5391 14.2275C84.7988 14.1546 85.0814 14.1182 85.3867 14.1182C85.8971 14.1182 86.3574 14.2161 86.7676 14.4121C87.1823 14.6081 87.5127 14.9157 87.7588 15.335C88.0049 15.7497 88.1279 16.292 88.1279 16.9619V22H85.4414V17.7754C85.4414 17.2604 85.3662 16.873 85.2158 16.6133C85.0654 16.349 84.833 16.2168 84.5186 16.2168C84.195 16.2168 83.9398 16.3102 83.7529 16.4971C83.5661 16.6794 83.4339 16.9482 83.3564 17.3037C83.279 17.6546 83.2402 18.0853 83.2402 18.5957V22H80.5674V11.3633H83.2402ZM93.7402 22V12.0059H96.4541V22H93.7402ZM103.311 14.1182C104.108 14.1182 104.76 14.3438 105.266 14.7949C105.771 15.2461 106.024 15.9684 106.024 16.9619V22H103.352V17.7754C103.352 17.2604 103.276 16.873 103.126 16.6133C102.98 16.349 102.743 16.2168 102.415 16.2168C101.909 16.2168 101.57 16.4242 101.396 16.8389C101.223 17.249 101.137 17.8392 101.137 18.6094V22H98.4639V14.2549H100.48L100.843 15.2803H100.945C101.109 15.0342 101.305 14.8245 101.533 14.6514C101.761 14.4782 102.023 14.346 102.319 14.2549C102.616 14.1637 102.946 14.1182 103.311 14.1182ZM112.573 14.1182C113.43 14.1182 114.102 14.4622 114.59 15.1504C115.077 15.834 115.321 16.8206 115.321 18.1104C115.321 18.9899 115.198 19.7305 114.952 20.332C114.706 20.929 114.369 21.3802 113.94 21.6855C113.517 21.9863 113.034 22.1367 112.491 22.1367C112.127 22.1367 111.817 22.0911 111.562 22C111.311 21.9089 111.101 21.7949 110.933 21.6582C110.769 21.5215 110.63 21.3825 110.516 21.2412H110.434C110.456 21.4189 110.475 21.6104 110.488 21.8154C110.507 22.0205 110.516 22.2598 110.516 22.5332V25.3633H107.843V14.2549H110.017L110.393 15.2393H110.516C110.643 15.0387 110.798 14.8542 110.98 14.6855C111.163 14.5124 111.384 14.3757 111.644 14.2754C111.908 14.1706 112.218 14.1182 112.573 14.1182ZM111.568 16.2168C111.309 16.2168 111.104 16.2783 110.953 16.4014C110.803 16.5244 110.693 16.7113 110.625 16.9619C110.561 17.208 110.525 17.5156 110.516 17.8848V18.0967C110.516 18.5068 110.548 18.8532 110.611 19.1357C110.675 19.4137 110.785 19.6257 110.939 19.7715C111.094 19.9128 111.309 19.9834 111.582 19.9834C111.805 19.9834 111.992 19.9196 112.143 19.792C112.293 19.6644 112.407 19.4616 112.484 19.1836C112.562 18.9056 112.601 18.5387 112.601 18.083C112.601 17.404 112.512 16.9232 112.334 16.6406C112.161 16.3581 111.906 16.2168 111.568 16.2168ZM124.386 14.2549V22H122.369L122.034 21.0361H121.877C121.717 21.2959 121.515 21.5078 121.269 21.6719C121.027 21.8314 120.758 21.9476 120.462 22.0205C120.166 22.098 119.858 22.1367 119.539 22.1367C119.033 22.1367 118.575 22.0387 118.165 21.8428C117.759 21.6468 117.436 21.3392 117.194 20.9199C116.957 20.5007 116.839 19.9606 116.839 19.2998V14.2549H119.512V18.4863C119.512 18.9876 119.582 19.3704 119.724 19.6348C119.869 19.8945 120.106 20.0244 120.435 20.0244C120.772 20.0244 121.032 19.9333 121.214 19.751C121.401 19.5687 121.531 19.2998 121.604 18.9443C121.676 18.5889 121.713 18.1559 121.713 17.6455V14.2549H124.386ZM130.025 20.0244C130.267 20.0244 130.488 19.9993 130.688 19.9492C130.889 19.8991 131.099 19.8353 131.317 19.7578V21.7061C131.026 21.8337 130.716 21.9362 130.388 22.0137C130.064 22.0957 129.649 22.1367 129.144 22.1367C128.642 22.1367 128.2 22.0592 127.817 21.9043C127.435 21.7448 127.136 21.4714 126.922 21.084C126.712 20.6921 126.607 20.1475 126.607 19.4502V16.2578H125.671V15.1709L126.86 14.3301L127.551 12.7031H129.301V14.2549H131.201V16.2578H129.301V19.2725C129.301 19.5231 129.365 19.7122 129.492 19.8398C129.62 19.9629 129.798 20.0244 130.025 20.0244Z" fill="white"/>
        </svg>
        <svg class="hover-svg" width="142" height="34" viewBox="0 0 142 34" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="142" height="34" rx="10" fill="white" fill-opacity="0.75"/>
        <rect x="1" y="1" width="140" height="32" rx="9" stroke="white" stroke-opacity="0.8" stroke-width="2"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M16.6673 24.495L27.4957 13.6667H30V20.3333H23.334V27H16.6673V24.495ZM10 20.3333H13.6372L23.334 10.6366V7H16.6673V13.6667H10V20.3333ZM18.2227 10.1394V10.895H21.7782V10.1394L20.0004 8.11719L18.2227 10.1394ZM18.2227 23.8606V23.105H21.7782V23.8606L20.0004 25.8828L18.2227 23.8606ZM26.8664 15.2179H26.1109V18.7734H26.8664L28.8887 16.9957L26.8664 15.2179ZM13.1336 18.7734H13.8891V15.2179H13.1336L11.1113 16.9957L13.1336 18.7734ZM29.7385 9.26777L27.9707 7.5L11.0001 24.4706L12.7679 26.2383L29.7385 9.26777Z" fill="#424650"/>
        <path d="M47.5635 16.791C47.5635 17.9531 47.347 18.9193 46.9141 19.6895C46.4811 20.4596 45.8704 21.0384 45.082 21.4258C44.2982 21.8086 43.3753 22 42.3135 22H39.0801V12.0059H42.5391C43.6146 12.0059 44.526 12.1904 45.2734 12.5596C46.0208 12.9287 46.5882 13.4688 46.9756 14.1797C47.3675 14.8906 47.5635 15.7611 47.5635 16.791ZM44.7607 16.8867C44.7607 16.2806 44.6787 15.7793 44.5146 15.3828C44.3551 14.9818 44.1136 14.6833 43.79 14.4873C43.4665 14.2868 43.0586 14.1865 42.5664 14.1865H41.7803V19.7852H42.3818C43.2021 19.7852 43.8037 19.5482 44.1865 19.0742C44.5693 18.5957 44.7607 17.8665 44.7607 16.8867ZM52.6904 14.1182C53.4424 14.1182 54.0918 14.2503 54.6387 14.5146C55.1855 14.7744 55.6071 15.1663 55.9033 15.6904C56.1995 16.2145 56.3477 16.8708 56.3477 17.6592V18.8486H51.5693C51.5921 19.2542 51.7425 19.5869 52.0205 19.8467C52.3031 20.1064 52.7178 20.2363 53.2646 20.2363C53.7477 20.2363 54.1898 20.1885 54.5908 20.0928C54.9964 19.9971 55.4134 19.849 55.8418 19.6484V21.5693C55.4681 21.7653 55.0602 21.9089 54.6182 22C54.1761 22.0911 53.6178 22.1367 52.9434 22.1367C52.1641 22.1367 51.4668 21.9977 50.8516 21.7197C50.2363 21.4417 49.751 21.0111 49.3955 20.4277C49.0446 19.8444 48.8691 19.0947 48.8691 18.1787C48.8691 17.249 49.0286 16.4857 49.3477 15.8887C49.6667 15.2871 50.1133 14.8428 50.6875 14.5557C51.2617 14.264 51.9294 14.1182 52.6904 14.1182ZM52.7861 15.9365C52.4717 15.9365 52.2074 16.0368 51.9932 16.2373C51.7835 16.4333 51.6605 16.7432 51.624 17.167H53.9209C53.9163 16.9391 53.8708 16.7318 53.7842 16.5449C53.6976 16.3581 53.57 16.21 53.4014 16.1006C53.2373 15.9912 53.0322 15.9365 52.7861 15.9365ZM61.6523 20.0244C61.8939 20.0244 62.1149 19.9993 62.3154 19.9492C62.516 19.8991 62.7256 19.8353 62.9443 19.7578V21.7061C62.6527 21.8337 62.3428 21.9362 62.0146 22.0137C61.6911 22.0957 61.2764 22.1367 60.7705 22.1367C60.2692 22.1367 59.8271 22.0592 59.4443 21.9043C59.0615 21.7448 58.763 21.4714 58.5488 21.084C58.3392 20.6921 58.2344 20.1475 58.2344 19.4502V16.2578H57.2979V15.1709L58.4873 14.3301L59.1777 12.7031H60.9277V14.2549H62.8281V16.2578H60.9277V19.2725C60.9277 19.5231 60.9915 19.7122 61.1191 19.8398C61.2467 19.9629 61.4245 20.0244 61.6523 20.0244ZM68.0781 14.1182C69.0579 14.1182 69.8236 14.362 70.375 14.8496C70.9264 15.3327 71.2021 16.0231 71.2021 16.9209V22H69.3496L68.8369 20.9746H68.7822C68.5635 21.248 68.3379 21.4714 68.1055 21.6445C67.8776 21.8132 67.6156 21.9362 67.3193 22.0137C67.0231 22.0957 66.6608 22.1367 66.2324 22.1367C65.7858 22.1367 65.3848 22.0456 65.0293 21.8633C64.6738 21.681 64.3936 21.4053 64.1885 21.0361C63.9834 20.667 63.8809 20.1999 63.8809 19.6348C63.8809 18.8053 64.168 18.1901 64.7422 17.7891C65.3164 17.388 66.1481 17.1624 67.2373 17.1123L68.5293 17.0713V16.9619C68.5293 16.6156 68.4427 16.3695 68.2695 16.2236C68.1009 16.0778 67.873 16.0049 67.5859 16.0049C67.2806 16.0049 66.9388 16.0596 66.5605 16.1689C66.1868 16.2738 65.8109 16.4105 65.4326 16.5791L64.6602 14.8154C65.1068 14.5876 65.6126 14.4144 66.1777 14.2959C66.7428 14.1774 67.3763 14.1182 68.0781 14.1182ZM68.543 18.541L67.9277 18.5684C67.4355 18.5866 67.0892 18.6732 66.8887 18.8281C66.6927 18.9785 66.5947 19.195 66.5947 19.4775C66.5947 19.7419 66.6654 19.9378 66.8066 20.0654C66.9479 20.1885 67.1348 20.25 67.3672 20.25C67.6908 20.25 67.9665 20.1475 68.1943 19.9424C68.4268 19.7373 68.543 19.4707 68.543 19.1426V18.541ZM76.5479 22.1367C75.764 22.1367 75.0827 21.9977 74.5039 21.7197C73.9251 21.4372 73.4762 21.0042 73.1572 20.4209C72.8428 19.833 72.6855 19.0811 72.6855 18.165C72.6855 17.2262 72.861 16.4583 73.2119 15.8613C73.5674 15.2643 74.0527 14.8245 74.668 14.542C75.2832 14.2594 75.9805 14.1182 76.7598 14.1182C77.2337 14.1182 77.6826 14.1706 78.1064 14.2754C78.5348 14.3802 78.9313 14.5238 79.2959 14.7061L78.5098 16.6816C78.1908 16.5404 77.8923 16.4287 77.6143 16.3467C77.3408 16.2601 77.056 16.2168 76.7598 16.2168C76.4909 16.2168 76.2539 16.2874 76.0488 16.4287C75.8438 16.57 75.6842 16.7842 75.5703 17.0713C75.4564 17.3538 75.3994 17.7139 75.3994 18.1514C75.3994 18.598 75.4564 18.958 75.5703 19.2314C75.6888 19.5049 75.8506 19.7031 76.0557 19.8262C76.2653 19.9492 76.5046 20.0107 76.7734 20.0107C77.1608 20.0107 77.5459 19.9515 77.9287 19.833C78.3161 19.71 78.6829 19.5413 79.0293 19.3271V21.4531C78.7103 21.6628 78.3503 21.8291 77.9492 21.9521C77.5482 22.0752 77.0811 22.1367 76.5479 22.1367ZM83.2402 11.3633V12.874C83.2402 13.4482 83.2266 13.9313 83.1992 14.3232C83.1764 14.7106 83.1536 15.0068 83.1309 15.2119H83.2539C83.4225 14.943 83.6139 14.7288 83.8281 14.5693C84.0423 14.4098 84.2793 14.2959 84.5391 14.2275C84.7988 14.1546 85.0814 14.1182 85.3867 14.1182C85.8971 14.1182 86.3574 14.2161 86.7676 14.4121C87.1823 14.6081 87.5127 14.9157 87.7588 15.335C88.0049 15.7497 88.1279 16.292 88.1279 16.9619V22H85.4414V17.7754C85.4414 17.2604 85.3662 16.873 85.2158 16.6133C85.0654 16.349 84.833 16.2168 84.5186 16.2168C84.195 16.2168 83.9398 16.3102 83.7529 16.4971C83.5661 16.6794 83.4339 16.9482 83.3564 17.3037C83.279 17.6546 83.2402 18.0853 83.2402 18.5957V22H80.5674V11.3633H83.2402ZM93.7402 22V12.0059H96.4541V22H93.7402ZM103.311 14.1182C104.108 14.1182 104.76 14.3438 105.266 14.7949C105.771 15.2461 106.024 15.9684 106.024 16.9619V22H103.352V17.7754C103.352 17.2604 103.276 16.873 103.126 16.6133C102.98 16.349 102.743 16.2168 102.415 16.2168C101.909 16.2168 101.57 16.4242 101.396 16.8389C101.223 17.249 101.137 17.8392 101.137 18.6094V22H98.4639V14.2549H100.48L100.843 15.2803H100.945C101.109 15.0342 101.305 14.8245 101.533 14.6514C101.761 14.4782 102.023 14.346 102.319 14.2549C102.616 14.1637 102.946 14.1182 103.311 14.1182ZM112.573 14.1182C113.43 14.1182 114.102 14.4622 114.59 15.1504C115.077 15.834 115.321 16.8206 115.321 18.1104C115.321 18.9899 115.198 19.7305 114.952 20.332C114.706 20.929 114.369 21.3802 113.94 21.6855C113.517 21.9863 113.034 22.1367 112.491 22.1367C112.127 22.1367 111.817 22.0911 111.562 22C111.311 21.9089 111.101 21.7949 110.933 21.6582C110.769 21.5215 110.63 21.3825 110.516 21.2412H110.434C110.456 21.4189 110.475 21.6104 110.488 21.8154C110.507 22.0205 110.516 22.2598 110.516 22.5332V25.3633H107.843V14.2549H110.017L110.393 15.2393H110.516C110.643 15.0387 110.798 14.8542 110.98 14.6855C111.163 14.5124 111.384 14.3757 111.644 14.2754C111.908 14.1706 112.218 14.1182 112.573 14.1182ZM111.568 16.2168C111.309 16.2168 111.104 16.2783 110.953 16.4014C110.803 16.5244 110.693 16.7113 110.625 16.9619C110.561 17.208 110.525 17.5156 110.516 17.8848V18.0967C110.516 18.5068 110.548 18.8532 110.611 19.1357C110.675 19.4137 110.785 19.6257 110.939 19.7715C111.094 19.9128 111.309 19.9834 111.582 19.9834C111.805 19.9834 111.992 19.9196 112.143 19.792C112.293 19.6644 112.407 19.4616 112.484 19.1836C112.562 18.9056 112.601 18.5387 112.601 18.083C112.601 17.404 112.512 16.9232 112.334 16.6406C112.161 16.3581 111.906 16.2168 111.568 16.2168ZM124.386 14.2549V22H122.369L122.034 21.0361H121.877C121.717 21.2959 121.515 21.5078 121.269 21.6719C121.027 21.8314 120.758 21.9476 120.462 22.0205C120.166 22.098 119.858 22.1367 119.539 22.1367C119.033 22.1367 118.575 22.0387 118.165 21.8428C117.759 21.6468 117.436 21.3392 117.194 20.9199C116.957 20.5007 116.839 19.9606 116.839 19.2998V14.2549H119.512V18.4863C119.512 18.9876 119.582 19.3704 119.724 19.6348C119.869 19.8945 120.106 20.0244 120.435 20.0244C120.772 20.0244 121.032 19.9333 121.214 19.751C121.401 19.5687 121.531 19.2998 121.604 18.9443C121.676 18.5889 121.713 18.1559 121.713 17.6455V14.2549H124.386ZM130.025 20.0244C130.267 20.0244 130.488 19.9993 130.688 19.9492C130.889 19.8991 131.099 19.8353 131.317 19.7578V21.7061C131.026 21.8337 130.716 21.9362 130.388 22.0137C130.064 22.0957 129.649 22.1367 129.144 22.1367C128.642 22.1367 128.2 22.0592 127.817 21.9043C127.435 21.7448 127.136 21.4714 126.922 21.084C126.712 20.6921 126.607 20.1475 126.607 19.4502V16.2578H125.671V15.1709L126.86 14.3301L127.551 12.7031H129.301V14.2549H131.201V16.2578H129.301V19.2725C129.301 19.5231 129.365 19.7122 129.492 19.8398C129.62 19.9629 129.798 20.0244 130.025 20.0244Z" fill="#424650"/>
        </svg>
        `;
    } else {
        window.myGameLiftStreams.detachInput();
        toggleButton.innerHTML = `
        <svg class="default-svg" width="140" height="34" viewBox="0 0 140 34" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="1" y="1" width="138" height="32" rx="9" stroke="white" stroke-opacity="0.5" stroke-width="2"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M23.334 13.6667V7H16.6673V13.6667H10V20.3333H16.6673V27H23.334V20.3333H30V13.6667H23.334ZM18.2227 10.1394V10.895H21.7782V10.1394L20.0004 8.11719L18.2227 10.1394ZM18.2227 23.8606V23.105H21.7782V23.8606L20.0004 25.8828L18.2227 23.8606ZM26.8664 15.2179H26.1109V18.7734H26.8664L28.8887 16.9957L26.8664 15.2179ZM13.1336 18.7734H13.8891V15.2179H13.1336L11.1113 16.9957L13.1336 18.7734Z" fill="white"/>
        <path d="M45.2119 22L44.7197 20.127H41.4727L40.9668 22H38L41.2607 11.9648H44.8633L48.165 22H45.2119ZM44.1592 17.9121L43.7285 16.2715C43.6829 16.0938 43.6169 15.8408 43.5303 15.5127C43.4437 15.18 43.3571 14.8382 43.2705 14.4873C43.1885 14.1318 43.1247 13.8402 43.0791 13.6123C43.0381 13.8402 42.9788 14.1227 42.9014 14.46C42.8285 14.7926 42.751 15.123 42.6689 15.4512C42.5915 15.7793 42.5231 16.0527 42.4639 16.2715L42.0332 17.9121H44.1592ZM52.8887 20.0244C53.1302 20.0244 53.3512 19.9993 53.5518 19.9492C53.7523 19.8991 53.9619 19.8353 54.1807 19.7578V21.7061C53.889 21.8337 53.5791 21.9362 53.251 22.0137C52.9274 22.0957 52.5127 22.1367 52.0068 22.1367C51.5055 22.1367 51.0635 22.0592 50.6807 21.9043C50.2979 21.7448 49.9993 21.4714 49.7852 21.084C49.5755 20.6921 49.4707 20.1475 49.4707 19.4502V16.2578H48.5342V15.1709L49.7236 14.3301L50.4141 12.7031H52.1641V14.2549H54.0645V16.2578H52.1641V19.2725C52.1641 19.5231 52.2279 19.7122 52.3555 19.8398C52.4831 19.9629 52.6608 20.0244 52.8887 20.0244ZM59.3281 20.0244C59.5697 20.0244 59.7907 19.9993 59.9912 19.9492C60.1917 19.8991 60.4014 19.8353 60.6201 19.7578V21.7061C60.3285 21.8337 60.0186 21.9362 59.6904 22.0137C59.3669 22.0957 58.9521 22.1367 58.4463 22.1367C57.945 22.1367 57.5029 22.0592 57.1201 21.9043C56.7373 21.7448 56.4388 21.4714 56.2246 21.084C56.015 20.6921 55.9102 20.1475 55.9102 19.4502V16.2578H54.9736V15.1709L56.1631 14.3301L56.8535 12.7031H58.6035V14.2549H60.5039V16.2578H58.6035V19.2725C58.6035 19.5231 58.6673 19.7122 58.7949 19.8398C58.9225 19.9629 59.1003 20.0244 59.3281 20.0244ZM65.7539 14.1182C66.7337 14.1182 67.4993 14.362 68.0508 14.8496C68.6022 15.3327 68.8779 16.0231 68.8779 16.9209V22H67.0254L66.5127 20.9746H66.458C66.2393 21.248 66.0137 21.4714 65.7812 21.6445C65.5534 21.8132 65.2913 21.9362 64.9951 22.0137C64.6989 22.0957 64.3366 22.1367 63.9082 22.1367C63.4616 22.1367 63.0605 22.0456 62.7051 21.8633C62.3496 21.681 62.0693 21.4053 61.8643 21.0361C61.6592 20.667 61.5566 20.1999 61.5566 19.6348C61.5566 18.8053 61.8438 18.1901 62.418 17.7891C62.9922 17.388 63.8239 17.1624 64.9131 17.1123L66.2051 17.0713V16.9619C66.2051 16.6156 66.1185 16.3695 65.9453 16.2236C65.7767 16.0778 65.5488 16.0049 65.2617 16.0049C64.9564 16.0049 64.6146 16.0596 64.2363 16.1689C63.8626 16.2738 63.4867 16.4105 63.1084 16.5791L62.3359 14.8154C62.7826 14.5876 63.2884 14.4144 63.8535 14.2959C64.4186 14.1774 65.0521 14.1182 65.7539 14.1182ZM66.2188 18.541L65.6035 18.5684C65.1113 18.5866 64.765 18.6732 64.5645 18.8281C64.3685 18.9785 64.2705 19.195 64.2705 19.4775C64.2705 19.7419 64.3411 19.9378 64.4824 20.0654C64.6237 20.1885 64.8105 20.25 65.043 20.25C65.3665 20.25 65.6423 20.1475 65.8701 19.9424C66.1025 19.7373 66.2188 19.4707 66.2188 19.1426V18.541ZM74.2236 22.1367C73.4398 22.1367 72.7585 21.9977 72.1797 21.7197C71.6009 21.4372 71.152 21.0042 70.833 20.4209C70.5186 19.833 70.3613 19.0811 70.3613 18.165C70.3613 17.2262 70.5368 16.4583 70.8877 15.8613C71.2432 15.2643 71.7285 14.8245 72.3438 14.542C72.959 14.2594 73.6562 14.1182 74.4355 14.1182C74.9095 14.1182 75.3584 14.1706 75.7822 14.2754C76.2106 14.3802 76.6071 14.5238 76.9717 14.7061L76.1855 16.6816C75.8665 16.5404 75.568 16.4287 75.29 16.3467C75.0166 16.2601 74.7318 16.2168 74.4355 16.2168C74.1667 16.2168 73.9297 16.2874 73.7246 16.4287C73.5195 16.57 73.36 16.7842 73.2461 17.0713C73.1322 17.3538 73.0752 17.7139 73.0752 18.1514C73.0752 18.598 73.1322 18.958 73.2461 19.2314C73.3646 19.5049 73.5264 19.7031 73.7314 19.8262C73.9411 19.9492 74.1803 20.0107 74.4492 20.0107C74.8366 20.0107 75.2217 19.9515 75.6045 19.833C75.9919 19.71 76.3587 19.5413 76.7051 19.3271V21.4531C76.3861 21.6628 76.026 21.8291 75.625 21.9521C75.224 22.0752 74.7568 22.1367 74.2236 22.1367ZM80.916 11.3633V12.874C80.916 13.4482 80.9023 13.9313 80.875 14.3232C80.8522 14.7106 80.8294 15.0068 80.8066 15.2119H80.9297C81.0983 14.943 81.2897 14.7288 81.5039 14.5693C81.7181 14.4098 81.9551 14.2959 82.2148 14.2275C82.4746 14.1546 82.7572 14.1182 83.0625 14.1182C83.5729 14.1182 84.0332 14.2161 84.4434 14.4121C84.8581 14.6081 85.1885 14.9157 85.4346 15.335C85.6807 15.7497 85.8037 16.292 85.8037 16.9619V22H83.1172V17.7754C83.1172 17.2604 83.042 16.873 82.8916 16.6133C82.7412 16.349 82.5088 16.2168 82.1943 16.2168C81.8708 16.2168 81.6156 16.3102 81.4287 16.4971C81.2419 16.6794 81.1097 16.9482 81.0322 17.3037C80.9548 17.6546 80.916 18.0853 80.916 18.5957V22H78.2432V11.3633H80.916ZM91.416 22V12.0059H94.1299V22H91.416ZM100.986 14.1182C101.784 14.1182 102.436 14.3438 102.941 14.7949C103.447 15.2461 103.7 15.9684 103.7 16.9619V22H101.027V17.7754C101.027 17.2604 100.952 16.873 100.802 16.6133C100.656 16.349 100.419 16.2168 100.091 16.2168C99.585 16.2168 99.2454 16.4242 99.0723 16.8389C98.8991 17.249 98.8125 17.8392 98.8125 18.6094V22H96.1396V14.2549H98.1562L98.5186 15.2803H98.6211C98.7852 15.0342 98.9811 14.8245 99.209 14.6514C99.4368 14.4782 99.6989 14.346 99.9951 14.2549C100.291 14.1637 100.622 14.1182 100.986 14.1182ZM110.249 14.1182C111.106 14.1182 111.778 14.4622 112.266 15.1504C112.753 15.834 112.997 16.8206 112.997 18.1104C112.997 18.9899 112.874 19.7305 112.628 20.332C112.382 20.929 112.045 21.3802 111.616 21.6855C111.192 21.9863 110.709 22.1367 110.167 22.1367C109.802 22.1367 109.493 22.0911 109.237 22C108.987 21.9089 108.777 21.7949 108.608 21.6582C108.444 21.5215 108.305 21.3825 108.191 21.2412H108.109C108.132 21.4189 108.15 21.6104 108.164 21.8154C108.182 22.0205 108.191 22.2598 108.191 22.5332V25.3633H105.519V14.2549H107.692L108.068 15.2393H108.191C108.319 15.0387 108.474 14.8542 108.656 14.6855C108.839 14.5124 109.06 14.3757 109.319 14.2754C109.584 14.1706 109.894 14.1182 110.249 14.1182ZM109.244 16.2168C108.984 16.2168 108.779 16.2783 108.629 16.4014C108.479 16.5244 108.369 16.7113 108.301 16.9619C108.237 17.208 108.201 17.5156 108.191 17.8848V18.0967C108.191 18.5068 108.223 18.8532 108.287 19.1357C108.351 19.4137 108.46 19.6257 108.615 19.7715C108.77 19.9128 108.984 19.9834 109.258 19.9834C109.481 19.9834 109.668 19.9196 109.818 19.792C109.969 19.6644 110.083 19.4616 110.16 19.1836C110.238 18.9056 110.276 18.5387 110.276 18.083C110.276 17.404 110.188 16.9232 110.01 16.6406C109.837 16.3581 109.581 16.2168 109.244 16.2168ZM122.062 14.2549V22H120.045L119.71 21.0361H119.553C119.393 21.2959 119.19 21.5078 118.944 21.6719C118.703 21.8314 118.434 21.9476 118.138 22.0205C117.841 22.098 117.534 22.1367 117.215 22.1367C116.709 22.1367 116.251 22.0387 115.841 21.8428C115.435 21.6468 115.112 21.3392 114.87 20.9199C114.633 20.5007 114.515 19.9606 114.515 19.2998V14.2549H117.188V18.4863C117.188 18.9876 117.258 19.3704 117.399 19.6348C117.545 19.8945 117.782 20.0244 118.11 20.0244C118.448 20.0244 118.707 19.9333 118.89 19.751C119.076 19.5687 119.206 19.2998 119.279 18.9443C119.352 18.5889 119.389 18.1559 119.389 17.6455V14.2549H122.062ZM127.701 20.0244C127.943 20.0244 128.164 19.9993 128.364 19.9492C128.565 19.8991 128.774 19.8353 128.993 19.7578V21.7061C128.701 21.8337 128.392 21.9362 128.063 22.0137C127.74 22.0957 127.325 22.1367 126.819 22.1367C126.318 22.1367 125.876 22.0592 125.493 21.9043C125.11 21.7448 124.812 21.4714 124.598 21.084C124.388 20.6921 124.283 20.1475 124.283 19.4502V16.2578H123.347V15.1709L124.536 14.3301L125.227 12.7031H126.977V14.2549H128.877V16.2578H126.977V19.2725C126.977 19.5231 127.04 19.7122 127.168 19.8398C127.296 19.9629 127.473 20.0244 127.701 20.0244Z" fill="white"/>
        </svg>
        <svg class="hover-svg" width="140" height="34" viewBox="0 0 140 34" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="140" height="34" rx="10" fill="white" fill-opacity="0.75"/>
        <rect x="1" y="1" width="138" height="32" rx="9" stroke="white" stroke-opacity="0.8" stroke-width="2"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M23.334 13.6667V7H16.6673V13.6667H10V20.3333H16.6673V27H23.334V20.3333H30V13.6667H23.334ZM18.2227 10.1394V10.895H21.7782V10.1394L20.0004 8.11719L18.2227 10.1394ZM18.2227 23.8606V23.105H21.7782V23.8606L20.0004 25.8828L18.2227 23.8606ZM26.8664 15.2179H26.1109V18.7734H26.8664L28.8887 16.9957L26.8664 15.2179ZM13.1336 18.7734H13.8891V15.2179H13.1336L11.1113 16.9957L13.1336 18.7734Z" fill="#424650"/>
        <path d="M45.2119 22L44.7197 20.127H41.4727L40.9668 22H38L41.2607 11.9648H44.8633L48.165 22H45.2119ZM44.1592 17.9121L43.7285 16.2715C43.6829 16.0938 43.6169 15.8408 43.5303 15.5127C43.4437 15.18 43.3571 14.8382 43.2705 14.4873C43.1885 14.1318 43.1247 13.8402 43.0791 13.6123C43.0381 13.8402 42.9788 14.1227 42.9014 14.46C42.8285 14.7926 42.751 15.123 42.6689 15.4512C42.5915 15.7793 42.5231 16.0527 42.4639 16.2715L42.0332 17.9121H44.1592ZM52.8887 20.0244C53.1302 20.0244 53.3512 19.9993 53.5518 19.9492C53.7523 19.8991 53.9619 19.8353 54.1807 19.7578V21.7061C53.889 21.8337 53.5791 21.9362 53.251 22.0137C52.9274 22.0957 52.5127 22.1367 52.0068 22.1367C51.5055 22.1367 51.0635 22.0592 50.6807 21.9043C50.2979 21.7448 49.9993 21.4714 49.7852 21.084C49.5755 20.6921 49.4707 20.1475 49.4707 19.4502V16.2578H48.5342V15.1709L49.7236 14.3301L50.4141 12.7031H52.1641V14.2549H54.0645V16.2578H52.1641V19.2725C52.1641 19.5231 52.2279 19.7122 52.3555 19.8398C52.4831 19.9629 52.6608 20.0244 52.8887 20.0244ZM59.3281 20.0244C59.5697 20.0244 59.7907 19.9993 59.9912 19.9492C60.1917 19.8991 60.4014 19.8353 60.6201 19.7578V21.7061C60.3285 21.8337 60.0186 21.9362 59.6904 22.0137C59.3669 22.0957 58.9521 22.1367 58.4463 22.1367C57.945 22.1367 57.5029 22.0592 57.1201 21.9043C56.7373 21.7448 56.4388 21.4714 56.2246 21.084C56.015 20.6921 55.9102 20.1475 55.9102 19.4502V16.2578H54.9736V15.1709L56.1631 14.3301L56.8535 12.7031H58.6035V14.2549H60.5039V16.2578H58.6035V19.2725C58.6035 19.5231 58.6673 19.7122 58.7949 19.8398C58.9225 19.9629 59.1003 20.0244 59.3281 20.0244ZM65.7539 14.1182C66.7337 14.1182 67.4993 14.362 68.0508 14.8496C68.6022 15.3327 68.8779 16.0231 68.8779 16.9209V22H67.0254L66.5127 20.9746H66.458C66.2393 21.248 66.0137 21.4714 65.7812 21.6445C65.5534 21.8132 65.2913 21.9362 64.9951 22.0137C64.6989 22.0957 64.3366 22.1367 63.9082 22.1367C63.4616 22.1367 63.0605 22.0456 62.7051 21.8633C62.3496 21.681 62.0693 21.4053 61.8643 21.0361C61.6592 20.667 61.5566 20.1999 61.5566 19.6348C61.5566 18.8053 61.8438 18.1901 62.418 17.7891C62.9922 17.388 63.8239 17.1624 64.9131 17.1123L66.2051 17.0713V16.9619C66.2051 16.6156 66.1185 16.3695 65.9453 16.2236C65.7767 16.0778 65.5488 16.0049 65.2617 16.0049C64.9564 16.0049 64.6146 16.0596 64.2363 16.1689C63.8626 16.2738 63.4867 16.4105 63.1084 16.5791L62.3359 14.8154C62.7826 14.5876 63.2884 14.4144 63.8535 14.2959C64.4186 14.1774 65.0521 14.1182 65.7539 14.1182ZM66.2188 18.541L65.6035 18.5684C65.1113 18.5866 64.765 18.6732 64.5645 18.8281C64.3685 18.9785 64.2705 19.195 64.2705 19.4775C64.2705 19.7419 64.3411 19.9378 64.4824 20.0654C64.6237 20.1885 64.8105 20.25 65.043 20.25C65.3665 20.25 65.6423 20.1475 65.8701 19.9424C66.1025 19.7373 66.2188 19.4707 66.2188 19.1426V18.541ZM74.2236 22.1367C73.4398 22.1367 72.7585 21.9977 72.1797 21.7197C71.6009 21.4372 71.152 21.0042 70.833 20.4209C70.5186 19.833 70.3613 19.0811 70.3613 18.165C70.3613 17.2262 70.5368 16.4583 70.8877 15.8613C71.2432 15.2643 71.7285 14.8245 72.3438 14.542C72.959 14.2594 73.6562 14.1182 74.4355 14.1182C74.9095 14.1182 75.3584 14.1706 75.7822 14.2754C76.2106 14.3802 76.6071 14.5238 76.9717 14.7061L76.1855 16.6816C75.8665 16.5404 75.568 16.4287 75.29 16.3467C75.0166 16.2601 74.7318 16.2168 74.4355 16.2168C74.1667 16.2168 73.9297 16.2874 73.7246 16.4287C73.5195 16.57 73.36 16.7842 73.2461 17.0713C73.1322 17.3538 73.0752 17.7139 73.0752 18.1514C73.0752 18.598 73.1322 18.958 73.2461 19.2314C73.3646 19.5049 73.5264 19.7031 73.7314 19.8262C73.9411 19.9492 74.1803 20.0107 74.4492 20.0107C74.8366 20.0107 75.2217 19.9515 75.6045 19.833C75.9919 19.71 76.3587 19.5413 76.7051 19.3271V21.4531C76.3861 21.6628 76.026 21.8291 75.625 21.9521C75.224 22.0752 74.7568 22.1367 74.2236 22.1367ZM80.916 11.3633V12.874C80.916 13.4482 80.9023 13.9313 80.875 14.3232C80.8522 14.7106 80.8294 15.0068 80.8066 15.2119H80.9297C81.0983 14.943 81.2897 14.7288 81.5039 14.5693C81.7181 14.4098 81.9551 14.2959 82.2148 14.2275C82.4746 14.1546 82.7572 14.1182 83.0625 14.1182C83.5729 14.1182 84.0332 14.2161 84.4434 14.4121C84.8581 14.6081 85.1885 14.9157 85.4346 15.335C85.6807 15.7497 85.8037 16.292 85.8037 16.9619V22H83.1172V17.7754C83.1172 17.2604 83.042 16.873 82.8916 16.6133C82.7412 16.349 82.5088 16.2168 82.1943 16.2168C81.8708 16.2168 81.6156 16.3102 81.4287 16.4971C81.2419 16.6794 81.1097 16.9482 81.0322 17.3037C80.9548 17.6546 80.916 18.0853 80.916 18.5957V22H78.2432V11.3633H80.916ZM91.416 22V12.0059H94.1299V22H91.416ZM100.986 14.1182C101.784 14.1182 102.436 14.3438 102.941 14.7949C103.447 15.2461 103.7 15.9684 103.7 16.9619V22H101.027V17.7754C101.027 17.2604 100.952 16.873 100.802 16.6133C100.656 16.349 100.419 16.2168 100.091 16.2168C99.585 16.2168 99.2454 16.4242 99.0723 16.8389C98.8991 17.249 98.8125 17.8392 98.8125 18.6094V22H96.1396V14.2549H98.1562L98.5186 15.2803H98.6211C98.7852 15.0342 98.9811 14.8245 99.209 14.6514C99.4368 14.4782 99.6989 14.346 99.9951 14.2549C100.291 14.1637 100.622 14.1182 100.986 14.1182ZM110.249 14.1182C111.106 14.1182 111.778 14.4622 112.266 15.1504C112.753 15.834 112.997 16.8206 112.997 18.1104C112.997 18.9899 112.874 19.7305 112.628 20.332C112.382 20.929 112.045 21.3802 111.616 21.6855C111.192 21.9863 110.709 22.1367 110.167 22.1367C109.802 22.1367 109.493 22.0911 109.237 22C108.987 21.9089 108.777 21.7949 108.608 21.6582C108.444 21.5215 108.305 21.3825 108.191 21.2412H108.109C108.132 21.4189 108.15 21.6104 108.164 21.8154C108.182 22.0205 108.191 22.2598 108.191 22.5332V25.3633H105.519V14.2549H107.692L108.068 15.2393H108.191C108.319 15.0387 108.474 14.8542 108.656 14.6855C108.839 14.5124 109.06 14.3757 109.319 14.2754C109.584 14.1706 109.894 14.1182 110.249 14.1182ZM109.244 16.2168C108.984 16.2168 108.779 16.2783 108.629 16.4014C108.479 16.5244 108.369 16.7113 108.301 16.9619C108.237 17.208 108.201 17.5156 108.191 17.8848V18.0967C108.191 18.5068 108.223 18.8532 108.287 19.1357C108.351 19.4137 108.46 19.6257 108.615 19.7715C108.77 19.9128 108.984 19.9834 109.258 19.9834C109.481 19.9834 109.668 19.9196 109.818 19.792C109.969 19.6644 110.083 19.4616 110.16 19.1836C110.238 18.9056 110.276 18.5387 110.276 18.083C110.276 17.404 110.188 16.9232 110.01 16.6406C109.837 16.3581 109.581 16.2168 109.244 16.2168ZM122.062 14.2549V22H120.045L119.71 21.0361H119.553C119.393 21.2959 119.19 21.5078 118.944 21.6719C118.703 21.8314 118.434 21.9476 118.138 22.0205C117.841 22.098 117.534 22.1367 117.215 22.1367C116.709 22.1367 116.251 22.0387 115.841 21.8428C115.435 21.6468 115.112 21.3392 114.87 20.9199C114.633 20.5007 114.515 19.9606 114.515 19.2998V14.2549H117.188V18.4863C117.188 18.9876 117.258 19.3704 117.399 19.6348C117.545 19.8945 117.782 20.0244 118.11 20.0244C118.448 20.0244 118.707 19.9333 118.89 19.751C119.076 19.5687 119.206 19.2998 119.279 18.9443C119.352 18.5889 119.389 18.1559 119.389 17.6455V14.2549H122.062ZM127.701 20.0244C127.943 20.0244 128.164 19.9993 128.364 19.9492C128.565 19.8991 128.774 19.8353 128.993 19.7578V21.7061C128.701 21.8337 128.392 21.9362 128.063 22.0137C127.74 22.0957 127.325 22.1367 126.819 22.1367C126.318 22.1367 125.876 22.0592 125.493 21.9043C125.11 21.7448 124.812 21.4714 124.598 21.084C124.388 20.6921 124.283 20.1475 124.283 19.4502V16.2578H123.347V15.1709L124.536 14.3301L125.227 12.7031H126.977V14.2549H128.877V16.2578H126.977V19.2725C126.977 19.5231 127.04 19.7122 127.168 19.8398C127.296 19.9629 127.473 20.0244 127.701 20.0244Z" fill="#424650"/>
        </svg>
        `;
    }
}

/**
 * Handles fullscreen functionality with browser compatibility
 * Security: Validates DOM elements before manipulation
 */
function appGoFullscreen() {
    // Check if it's iOS
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

    if (isIOS) {
        if (window.navigator.standalone) {
            console.log("Running in full-screen mode from home screen.");
        }
    } else {
        // For non-iOS devices, use the previous fullscreen logic
        const fullscreenContainer = document.getElementById('streamFullscreenContainer');
        
        if (fullscreenContainer) {
            if (!document.fullscreenElement && 
                !document.mozFullScreenElement && 
                !document.webkitFullscreenElement && 
                !document.msFullscreenElement) {
                // Enter fullscreen
                if (fullscreenContainer.requestFullscreen) {
                    fullscreenContainer.requestFullscreen();
                } else if (fullscreenContainer.mozRequestFullScreen) {
                    fullscreenContainer.mozRequestFullScreen();
                } else if (fullscreenContainer.webkitRequestFullscreen) {
                    fullscreenContainer.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                } else if (fullscreenContainer.msRequestFullscreen) {
                    fullscreenContainer.msRequestFullscreen();
                }
            } else {
                // Exit fullscreen
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                }
            }
        }
    }

    // Ensure that input is enabled
    if (!window.myInputEnabled) {
        appToggleInput();
    }
}

/**
 * Exit full screen mode
 */
function exitFullscreen() {
    if (document.exitFullscreen) {
        document.exitFullscreen();
    } else if (document.mozCancelFullScreen) { // Firefox
        document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) { // Chrome, Safari and Opera
        document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) { // IE/Edge
        document.msExitFullscreen();
    }
}

/**
 * Formats and validates JSON input with security controls
 * Security Controls: XSS prevention, size limits, and safe parsing
 */
function pastePrettyJson(element, original) {
    setTimeout(function() {
        if (!original || original.length === 0) {
            try {
                const currentValue = element.value.trim();
                
                // Security Control 1: Basic sanitization for XSS prevention
                if (currentValue.includes('<script>') || 
                    currentValue.includes('javascript:')) {
                    console.error('Potentially unsafe content detected');
                    return;
                }

                // Security Control 2: Size limit to prevent DoS
                const MAX_SIZE = 100000; // 100KB limit
                if (currentValue.length > MAX_SIZE) {
                    console.error('Input exceeds maximum size limit');
                    return;
                }

                // Security Control 3: Safe JSON parsing
                const parsedJson = JSON.parse(currentValue);
                const formattedJson = JSON.stringify(parsedJson, null, 2);
                element.value = formattedJson;

            } catch (error) {
                console.error('Failed to parse JSON:', error.message);
            }
        }
    }, 0, element);
}

/**
 * Helper to resize text boxes on input event
 */
function autoResize() {
    let element = this;
    element.style.height = 'auto';
    element.style.height = element.scrollHeight + 'px';
    element.style.width = 'auto';
    element.style.maxWidth = '200%';
}

/**
 * Helper to update word-wrap property of text areas as well as corresponding labels
 */
function toggleWordWrap() {
    let cmdLineArgsInput = document.getElementById('setupArgs');
    let envVarsInput = document.getElementById('setupEnv');
    let current = cmdLineArgsInput.wrap;
    if (current === 'soft') {
        cmdLineArgsInput.wrap = 'off';
        envVarsInput.wrap = 'off';
        document.getElementById('setupWordWrap').textContent = 'disabled';
    } else {
        cmdLineArgsInput.wrap = 'soft';
        envVarsInput.wrap = 'soft';
        document.getElementById('setupWordWrap').textContent = 'enabled';
    }
}

/**
 * Helper function to generate a unique client ID
 */
function generateClientId() {
    return 'client_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * Collects minimal required browser information
 * Security: Limited data collection for privacy
 */
function getBrowserInfo() {
    return {
        userAgent: navigator.userAgent,
        language: navigator.language,
        screenResolution: `${window.screen.width}x${window.screen.height}`
    };
}

/**
 * Sanitizes user input to prevent injection attacks
 * Security Control: Only allows alphanumeric characters and limits length
 * @param {string} input - The input string to sanitize
 * @returns {string} Sanitized string
 */
function sanitizeInput(input) {
    if (!input) return '';
    
    // Remove any characters that aren't letters or numbers
    const sanitized = input.replace(/[^a-zA-Z0-9]/g, '');
    
    // Optional: Limit the length to prevent extremely long inputs
    return sanitized.slice(0, 50); // Adjust max length as needed
}

// Check if URL contains the necessary parameters to start streaming
// Security: Safe URL parameter handling with validation
const urlParams = new URLSearchParams(window.location.search);

// Validate and set userId with a default fallback
// Security: Sanitize and validate all URL parameters
const userId = sanitizeInput(urlParams.get('userId')) || 'Player1';
// Validate streamGroupId and applicationId
const streamGroupId = sanitizeInput(urlParams.get('streamGroupId')) || '';
const applicationId = sanitizeInput(urlParams.get('applicationId')) || '';

/**
 * Validates URL parameters for security
 * Security: Input validation and sanitization of URL parameters
 */
function validateParameters() {
    if (userId.length < 1) {
        throw new Error('Invalid userId');
    }
    
    if (streamGroupId && streamGroupId.length < 1) {
        throw new Error('Invalid streamGroupId');
    }
    
    if (applicationId && applicationId.length < 1) {
        throw new Error('Invalid applicationId');
    }
}

try {
    validateParameters();
} catch (error) {
    console.error('Parameter validation failed:', error.message);
    // Handle the error appropriately (e.g., show user message, redirect)
}

/**
 * Validates user ID with security controls
 * Security: Length limits and character restrictions
 */
function validateUserId(input) {
    if (!input || input.length < 1 || input.length > 30) {
        throw new Error('UserId must be between 1 and 30 characters');
    }
    return sanitizeInput(input);
}

/**
 * Validates and sanitizes stream IDs
 * @param {string} input - The stream ID to validate
 * @returns {string} Sanitized 9-character alphanumeric ID or empty string if invalid
 */
function validateStreamIds(input) {
    if (!input) return '';
    
    // Allow alphanumeric characters and hyphens
    const sanitized = input.replace(/[^0-9a-zA-Z-]/g, '');
    
    console.log('Original ID:', input);
    console.log('Sanitized ID:', sanitized);
    
    // Check if it's a Stream Group ID
    if (sanitized.startsWith('sg-')) {
        // Must match: sg- followed by at least 5 alphanumeric characters
        // No specific requirement for the last character
        if (!sanitized.match(/^sg-[a-zA-Z0-9]{5,}$/)) {
            console.error('Stream Group ID validation failed:', {
                id: sanitized,
                length: sanitized.length,
                afterPrefix: sanitized.slice(3)
            });
            return '';
        }
    }
    // Check if it's an Application ID
    else if (sanitized.startsWith('a-')) {
        // Must match: a- followed by at least 4 alphanumeric characters
        if (!sanitized.match(/^a-[a-zA-Z0-9]{4,}$/)) {
            console.error('Application ID validation failed:', {
                id: sanitized,
                length: sanitized.length,
                afterPrefix: sanitized.slice(2)
            });
            return '';
        }
    }
    else {
        console.error('Invalid ID format - must start with either sg- or a-');
        return '';
    }
    console.log('ID validation passed:', sanitized);
    return sanitized;
}